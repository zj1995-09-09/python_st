# encoding: utf-8
# @author: MrZhou
# @file: 22文件IO.py
# @time: 2023/2/20 11:04
# @desc:

# 打印到屏幕
# 最简单的输出是print语句，可以给它传递零个或多个用逗号隔开的表达式，此函数会把传递的表达式转换成一个字符串表达式，
# 并将结果写到标准输出如下

# print('Python是一个非常棒的语言，不是吗？')
#
# 读取键盘输入
# Python提供了两个内置函数从标准输入读入一行文本，默认标准输出是键盘
#
# raw_input
# input
#
# raw_input([prompt])函数从标准输入读取一个行，并返回一个字符串(去掉结尾的换行符)
# str=raw_input('请输入：')
# print("你输入的内容是",str)


# input 函数
# 基本和raw_input类似，但是input可以接收一个python表达式作为输入，并将运算结果返回 ?不确定
# str1 = input("请输入：")
# print('你输入的内容是:', str1)


# 打开和关闭文件
# open函数创建一个file对象，相关的方法才可以调用它进行读写
# file object = open(file_name [, access_mode][, buffering])
#
# file_name是一个包含了你要访问的文件名称的字符串值
#
# 不同模式打开文件的完全列表
# t	文本模式 (默认)。
# x	写模式，新建一个文件，如果该文件已存在则会报错。
# b	二进制模式。
# +	打开一个文件进行更新(可读可写)。
# U	通用换行模式（不推荐）。
# r	以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。
# rb	以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。一般用于非文本文件如图片等。
# r+	打开一个文件用于读写。文件指针将会放在文件的开头。
# rb+	以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。一般用于非文本文件如图片等。
# w	打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。
# wb	以二进制格式打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。一般用于非文本文件如图片等。
# w+	打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。
# wb+	以二进制格式打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。一般用于非文本文件如图片等。
# a	打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。
#
#
# 模式	r	r+	w	w+	a	a+
# 读	+	+		+		+
# 写		+	+	+	+	+
# 创建			+	+	+	+
# 覆盖			+	+
# 指针在开始	+	+	+	+
# 指针在结尾					+	+

# file 对象的属性
# 一个文件被打开后，你有一个file对象
# file.closed 返回TRUE如果文件已被关闭，否则返回false
# file.mode 返回被打开文件的访问模式
# file.name 返回文件的名称

fo = open("foo.txt", "w")
print("文件名: ", fo.name)
print ("是否已关闭 : ", fo.closed)
print("访问模式 : ", fo.mode)
# print("末尾是否强制加空格 : ", fo.softspace)

Python的os模块提供帮你执行文件处理操作的方法，比如重命名和删除文件
 rename()
os.rename(current_file_name, new_file_name)

remove()
os.remove(file_name)
# 删除一个已经存在的文件test2.txt
os.remove("test2.txt")

# 创建目录test
os.mkdir("test")

chdir改变当前的目录，需要的一个参数是你想设成当前目录的目录名称

os.chdir('newdir')
import os
将当前目录改为"/home/newdir"
os.chdir("/home/newdir")

getcwd()方法
显示当前的工作目录
print(os.getcwd())

rmdir()方法 删除目录，目录名称以参数传递
在删除这个目录之前，它的所有内容应该先被清除

os.rmdir('dirname')
目录的完全合规的名称必须被给出，否则会在当前目录下搜索该目录

import os
删除/tmp/test目录
os.rmdir("/temp/test")


